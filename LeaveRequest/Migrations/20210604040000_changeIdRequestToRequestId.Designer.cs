// <auto-generated />
using System;
using LeaveRequest.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LeaveRequest.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210604040000_changeIdRequestToRequestId")]
    partial class changeIdRequestToRequestId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LeaveRequest.Models.Account", b =>
                {
                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NIK");

                    b.ToTable("tb_m_account");
                });

            modelBuilder.Entity("LeaveRequest.Models.Departement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tb_m_department");
                });

            modelBuilder.Entity("LeaveRequest.Models.LeaveAllowance", b =>
                {
                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LeaveAllow")
                        .HasColumnType("int");

                    b.Property<int>("UsedLeaveAllow")
                        .HasColumnType("int");

                    b.HasKey("NIK");

                    b.ToTable("tb_m_leaveAllowance");
                });

            modelBuilder.Entity("LeaveRequest.Models.Person", b =>
                {
                    b.Property<string>("NIK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDepartement")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NIK");

                    b.HasIndex("IdDepartement");

                    b.HasIndex("ManagerId");

                    b.ToTable("tb_m_person");
                });

            modelBuilder.Entity("LeaveRequest.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestId");

                    b.ToTable("tb_m_request");
                });

            modelBuilder.Entity("LeaveRequest.Models.RequestStatus", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId", "NIK");

                    b.HasIndex("NIK");

                    b.ToTable("tb_m_requestStatus");
                });

            modelBuilder.Entity("LeaveRequest.Models.RequestType", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("TipeId")
                        .HasColumnType("int");

                    b.HasKey("RequestId", "TipeId");

                    b.HasIndex("TipeId");

                    b.ToTable("tb_m_requestType");
                });

            modelBuilder.Entity("LeaveRequest.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tb_m_role");
                });

            modelBuilder.Entity("LeaveRequest.Models.RoleAccount", b =>
                {
                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.HasKey("NIK", "IdRole");

                    b.HasIndex("IdRole");

                    b.ToTable("tb_m_roleaccount");
                });

            modelBuilder.Entity("LeaveRequest.Models.Tipe", b =>
                {
                    b.Property<int>("TipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameTipe")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipeId");

                    b.ToTable("tb_m_tipe");
                });

            modelBuilder.Entity("LeaveRequest.Models.Account", b =>
                {
                    b.HasOne("LeaveRequest.Models.Person", "Person")
                        .WithOne("Account")
                        .HasForeignKey("LeaveRequest.Models.Account", "NIK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeaveRequest.Models.LeaveAllowance", b =>
                {
                    b.HasOne("LeaveRequest.Models.Person", "Person")
                        .WithOne("LeaveAllowance")
                        .HasForeignKey("LeaveRequest.Models.LeaveAllowance", "NIK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeaveRequest.Models.Person", b =>
                {
                    b.HasOne("LeaveRequest.Models.Departement", "Departement")
                        .WithMany("Persons")
                        .HasForeignKey("IdDepartement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeaveRequest.Models.Person", "ParentPerson")
                        .WithMany("subPerson")
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("LeaveRequest.Models.RequestStatus", b =>
                {
                    b.HasOne("LeaveRequest.Models.Person", "Person")
                        .WithMany("RequestStatuses")
                        .HasForeignKey("NIK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeaveRequest.Models.Request", "Request")
                        .WithMany("RequestStatuses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeaveRequest.Models.RequestType", b =>
                {
                    b.HasOne("LeaveRequest.Models.Request", "Request")
                        .WithMany("RequestTypes")
                        .HasForeignKey("TipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeaveRequest.Models.Tipe", "Tipe")
                        .WithMany("RequestTypes")
                        .HasForeignKey("TipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeaveRequest.Models.RoleAccount", b =>
                {
                    b.HasOne("LeaveRequest.Models.Role", "Role")
                        .WithMany("RoleAccounts")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeaveRequest.Models.Account", "Account")
                        .WithMany("RoleAccounts")
                        .HasForeignKey("NIK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
